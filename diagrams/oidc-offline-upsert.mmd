sequenceDiagram

    participant Client
    participant IdP
    participant Attribute Provider
    participant KAS
    participant PolicyStore

   alt Provisioning/"online setup" flow
        Client->>+IdP: /auth: AuthN Request bearer JWT
        IdP-->>-Client: /auth success response: IdP-signed Bearer JWT
        Note right of Client: The bearer JWT might not need to contain any claims other than a KAS URL, remainder can come from userinfo

        Client->>+IdP: /userinfo AuthZ Request claims (client subj/obj attributes) JWT
        IdP->>+Attribute Provider: Request user's Virtru claims (aka attributes) from /userinfo
        Attribute Provider-->>-IdP: Return Virtru claims (client subj/obj attributes) from claim store
        IdP-->>-Client: /userinfo success response: IdP-signed Virtru claims (client attributes) JWT
    end
    loop Repeat encrypt offline
        Client->>+Client: Encrypt TDF payload with Virtru claims (attributes) JWT embedded w/ encrypt attributes
    end
    alt Out-of-band policy sync if desired
        Client->>+KAS: /upsert with JWT bearer in Auth header, and claims (attributes) JWT in payload
        KAS->>+IdP: Get OIDC JWT signing key from IdP that issued bearer token
        IdP-->>-KAS: validate {bearer|claims} JWTs with IdP's signing key
        Note left of KAS: An IdP's bearer token and claims token will always be signed by the SAME KEY
        Note left of KAS: ...but there is no reason why multiple claims tokens from different IdP couldn't be included
        Note left of KAS: We can always use claims token `iss` to fetch the public signing key via OIDC well-known URLs
        KAS->>+PolicyStore: Store client policy and get policy ID
        PolicyStore-->>-KAS: Return policy ID

        KAS-->>-Client: /upsert response with stored policyID
    end
